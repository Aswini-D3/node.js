{"version":3,"sources":["../src/ContactList.js"],"names":["fs","require","util","writeFile","promisify","readFile","Contact","obj","name","age","phone","length","_name","_phone","toString","ContactList","filename","list","contact","push","JSON","stringify","readFilePromise","then","parse","fileString","forEach","addContact","contactObj","Promise","resolve","exports"],"mappings":";;;;;;AAAA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;;AAEA,IAAME,YAAYD,KAAKE,SAAL,CAAeJ,GAAGG,SAAlB,CAAlB;AACA,IAAME,WAAWH,KAAKE,SAAL,CAAeJ,GAAGK,QAAlB,CAAjB;;IAEMC,O;AACL,kBAAYC,GAAZ,EAAiB;AAAA;;AAChB,MAAG,CAACA,GAAJ,EACC,MAAM,mDAAN;;AAED;;AAEA,OAAKC,IAAL,GAAYD,IAAIC,IAAhB;AACA,OAAKC,GAAL,GAAWF,IAAIE,GAAf;AACA,OAAKC,KAAL,GAAaH,IAAIG,KAAjB;AACA;;;;;;AAsCA;AACA;2BACS;AACR,UAAO;AACNF,UAAM,KAAKA,IADL;AAENC,SAAK,KAAKA,GAFJ;AAGNC,WAAO,KAAKA;AAHN,IAAP;AAKA;;;yBAEM;AACN,OAAI,KAAKA,KAAT,EACC,oBAAmB,KAAKF,IAAxB,oBADD,KAGC,OAAW,KAAKA,IAAhB;AAED;;;6BACU;AACV,uBAAmB,KAAKA,IAAxB,iBAA0C,EAAE,KAAKC,GAAjD;AACA;;;oBAvDQD,I,EAAK;AACd,OAAG,CAACA,IAAJ,EACC,MAAM,mCAAN,CADD,KAEK,IAAG,OAAOA,IAAP,KAAgB,QAAnB,EACJ,MAAM,oCAAN,CADI,KAEA,IAAGA,KAAKG,MAAL,GAAc,CAAjB,EACJ,MAAM,iDAAN;AACD,QAAKC,KAAL,GAAaJ,IAAb;AACA,G;sBAES;AACT,UAAO,KAAKI,KAAZ;AACA;;;sBAGW;AACV,UAAO,KAAKC,MAAZ;AACA,G;oBAESH,K,EAAM;AACf,OAAG,CAACA,KAAJ,EACC,OAAO,KAAKG,MAAL,GAAc,IAArB;;AAED,OAAG,OAAOH,KAAP,KAAiB,QAApB,EACC,CADD,KAEK,IAAG,OAAOA,KAAP,KAAiB,QAApB,EACJA,QAAQA,MAAMI,QAAN,EAAR,CADI,KAGJ,MAAM,+CAAN;;AAED,OAAGJ,MAAMC,MAAN,GAAe,CAAlB,EACC,MAAM,iDAAN;;AAED,QAAKE,MAAL,GAAcH,KAAd;AACA;;;;;;AAsBF;;IAEKK,W;AACL,sBAAYC,QAAZ,EAAqB;AAAA;;AACpB,OAAKC,IAAL,GAAY,EAAZ;AACA,OAAKD,QAAL,GAAgBA,QAAhB;AACA;;;;6BAEUE,O,EAAQ;AAClB,OAAGA,mBAAmBZ,OAAtB,EAA8B;AAC7B,SAAKW,IAAL,CAAUE,IAAV,CAAeD,OAAf;AACA;AACD;;;yBAEK;AACL,UAAOf,UAAU,KAAKa,QAAf,EAAyBI,KAAKC,SAAL,CAAe,KAAKJ,IAApB,CAAzB,EAAoD,MAApD,CAAP;AACA;;;yBAEK;AAAA;;AACL,OAAMK,kBAAkBjB,SAAS,KAAKW,QAAd,EAAwB,MAAxB,CAAxB;;AAEA,UAAOM,gBACNC,IADM,CACD,sBAAc;AACnBH,SAAKI,KAAL,CAAWC,UAAX,EACCC,OADD,CACS;AAAA,YAAc,MAAKC,UAAL,CAAgB,IAAIrB,OAAJ,CAAYsB,UAAZ,CAAhB,CAAd;AAAA,KADT;;AAGA,WAAOC,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACA,IANM,CAAP;AAOA;;;;;;AACD;;AAEDC,QAAQzB,OAAR,GAAkBA,OAAlB;AACAyB,QAAQhB,WAAR,GAAsBA,WAAtB","file":"ContactList.js","sourcesContent":["const fs = require(\"fs\");\nconst util = require(\"util\");\n\nconst writeFile = util.promisify(fs.writeFile);\nconst readFile = util.promisify(fs.readFile);\n\nclass Contact {\n\tconstructor(obj) {\n\t\tif(!obj)\n\t\t\tthrow \"Need an object to instantiate Contact properties.\";\n\n\t\t// console.log(\"obj:\", obj);\n\n\t\tthis.name = obj.name;\n\t\tthis.age = obj.age;\n\t\tthis.phone = obj.phone;\n\t};\n\n\tset name (name){\n\t\tif(!name)\n\t\t\tthrow \"Name is needed to create a person\";\n\t\telse if(typeof name !== \"string\")\n\t\t\tthrow \"Contact.name needs to be a string.\"\n\t\telse if(name.length < 4)\n\t\t\tthrow \"Contact.name needs to be at least 4 characters.\"\n\t\tthis._name = name;\n\t}\n\n\tget name(){\n\t\treturn this._name;\n\t}\n  \n\n  get phone(){\n  \treturn this._phone;\n  }\n\n  set phone(phone){\n  \tif(!phone)\n  \t\treturn this._phone = null;\n\n  \tif(typeof phone === \"string\")\n  \t\t;\n  \telse if(typeof phone === \"number\")\n  \t\tphone = phone.toString();\n  \telse\n  \t\tthrow \"Contact.phone should be a string or a number.\"\n\n  \tif(phone.length < 8)\n  \t\tthrow \"Contact.phone should be at least 8 digits long.\"\n\n  \tthis._phone = phone;\n  }\n\n  // this helps JSON.stringify convert getter properties correctly\n  // https://stackoverflow.com/questions/42107492/json-stringify-es6-class-property-with-getter-setter\n  toJSON (){\n  \treturn {\n  \t\tname: this.name,\n  \t\tage: this.age,\n  \t\tphone: this.phone\n  \t}\n  }\n\n  call() {\n  \tif (this.phone)\n  \t\treturn `Calling ${ this.name } at this.phone`;\n  \telse\n  \t\treturn `${ this.name } has no phone number saved`;\n\n  }\n  birthday() {\n  \treturn `Wishing ${ this.name } a happy ${ ++this.age }th birthday!`;\n  }\n};\n\nclass ContactList {\n\tconstructor(filename){\n\t\tthis.list = [];\n\t\tthis.filename = filename;\n\t}\n\n\taddContact(contact){\n\t\tif(contact instanceof Contact){\n\t\t\tthis.list.push(contact);\n\t\t}\n\t}\n\n\tsave(){\n\t\treturn writeFile(this.filename, JSON.stringify(this.list), \"utf8\");\n\t}\n\n\tload(){\n\t\tconst readFilePromise = readFile(this.filename, \"utf8\");\n\n\t\treturn readFilePromise\n\t\t.then(fileString => {\n\t\t\tJSON.parse(fileString)\n\t\t\t.forEach(contactObj => this.addContact(new Contact(contactObj)));\n\n\t\t\treturn Promise.resolve(null);\n\t\t});\n\t}\n};\n\nexports.Contact = Contact;\nexports.ContactList = ContactList;"]}