{"version":3,"sources":["../src/index.js"],"names":["http","fs","qs","contacts","port","app","listen","console","log","use","req","res","next","method","url","static","urlencoded","extended","get","send","post","obj","body","JSON","stringify","contact","err","status","load","then","addContact","save","write","name","end","catch"],"mappings":";;AAAA;;IAAYA,I;;AACZ;;IAAYC,E;;AAGZ;;IAAYC,E;;AACZ;;;;AACA;;;;AAEA;;;;;;AANA;AACA;AAOA,IAAIC,WAAW,6BAAgB,qBAAhB,CAAf;AACA,IAAMC,OAAO,IAAb;;AAEA,IAAMC,MAAM,wBAAZ;AACAA,IAAIC,MAAJ,CAAWF,IAAX,EAAiB,YAAM;AACtBG,SAAQC,GAAR,6BAAuCJ,IAAvC;AACA,CAFD;;AAIAC,IAAII,GAAJ,CAAQ,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC3BL,SAAQC,GAAR,CAAYE,IAAIG,MAAhB,EAAwBH,IAAII,GAA5B;AACAF;AACA,CAHD;;AAKAP,IAAII,GAAJ,CAAQ,SAAR,EAAmB,kBAAQM,MAAR,CAAe,QAAf,CAAnB;AACAV,IAAII,GAAJ,CAAQ,qBAAWO,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEAZ,IAAIa,GAAJ,CAAQ,GAAR,EAAa,UAACR,GAAD,EAAMC,GAAN,EAAc;AAC1B;AACAA,KAAIQ,IAAJ,CAAS,8BAAT;AACA,CAHD;;AAKAd,IAAIe,IAAJ,CAAS,cAAT,EAAyB,UAACV,GAAD,EAAMC,GAAN,EAAc;AACtC;AACA,KAAMU,MAAMX,IAAIY,IAAhB;AACAf,SAAQC,GAAR,qBAA+Be,KAAKC,SAAL,CAAeH,GAAf,CAA/B;;AAEA,KAAII,gBAAJ;AACA,KAAG;AACFA,YAAU,yBAAYJ,GAAZ,CAAV;AACA,EAFD,CAGA,OAAMK,GAAN,EAAU;AACT,SAAOf,IAAIgB,MAAJ,CAAW,GAAX,EAAgBR,IAAhB,CAAqBO,GAArB,CAAP;AACA;;AAED,QAAOvB,SAASyB,IAAT,GACNC,IADM,CACD,YAAM;AACX1B,WAAS2B,UAAT,CAAoBL,OAApB;AACAtB,WAAS4B,IAAT;AACA,EAJM,EAKNF,IALM,CAKD,YAAM;AACXlB,MAAIqB,KAAJ,kCAA0CP,QAAQQ,IAAlD;AACAtB,MAAIuB,GAAJ;AACA,EARM,EASNC,KATM,CASA,UAACT,GAAD,EAAS;AACff,MAAIgB,MAAJ,CAAW,GAAX,EAAgBR,IAAhB,CAAqBO,GAArB;AACA,EAXM,CAAP;AAYA,CAzBD;;AA2BA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["import * as http from \"http\";\nimport * as fs from \"fs\";\n// querystring is used to parse url parameters to an object\n// also a core module\nimport * as qs from \"querystring\";\nimport express from \"express\";\nimport bodyParser from \"body-parser\";\n\nimport { Contact, ContactList } from\"./ContactList.js\";\n\nlet contacts = new ContactList(\"./src/contacts.json\");\nconst port = 8080;\n\nconst app = express();\napp.listen(port, () => {\n\tconsole.log(`Server started at port ${ port }`);\n});\n\napp.use((req, res, next) => {\n\tconsole.log(req.method, req.url);\n\tnext();\n});\n\napp.use(\"/public\", express.static('public'));\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// app.use((req, res, next) => {\n// \tconsole.log(\"Second middleware\");\n// \tif(req.url === \"/\")\n// \t\tconsole.log(\"Index request\");\n// \tnext();\n// });\n\napp.get(\"/\", (req, res) => {\n\t// console.log(\"get 1\");\n\tres.send(\"This is the webserver index.\");\n});\n\napp.post(\"/add-contact\", (req, res) => {\n\t// console.log(\"post 2\");\n\tconst obj = req.body;\n\tconsole.log(`Incoming user: ${ JSON.stringify(obj) }`);\n\n\tlet contact;\n\ttry{\n\t\tcontact = new Contact(obj);\n\t}\n\tcatch(err){\n\t\treturn res.status(401).send(err);\n\t}\n\n\treturn contacts.load()\n\t.then(() => {\n\t\tcontacts.addContact(contact);\n\t\tcontacts.save();\n\t})\n\t.then(() => {\n\t\tres.write(`Successfully saved contact: ${ contact.name }`);\n\t\tres.end();\n\t})\n\t.catch((err) => {\n\t\tres.status(500).send(err);\n\t})\n});\n\n// http\n// .createServer((req, res) => {\n// \t// log the incoming request\n// \tconsole.log(req.method, req.url);\n\n// \tif(req.url === '/'){\n// \t\tres.write(\"This is the webserver index.\")\n// \t\treturn res.end();\n// \t}\n\n// \tif(req.url === '/add-contact' && req.method === 'POST'){\n// \t\tlet body = \"\";\n// \t\treq.on(\"data\", chunk => {\n// \t        body += chunk;\n// \t    });\n\n// \t    req.on(\"end\", () => {\n// \t    \tconsole.log(\"Received params:\", qs.parse(body));\n// \t    \tconst obj = qs.parse(body);\n\n// \t    \tlet contact;\n// \t    \ttry{\n// \t\t\t\tcontact = new Contact(obj);\n// \t    \t}\n// \t    \tcatch(err){\n// \t    \t\tconsole.log(err);\n// \t    \t\tres.statusCode = 401;\n// \t    \t\tres.write(err);\n// \t    \t\treturn res.end();\n// \t    \t}\n\n// \t\t\treturn contacts.load()\n// \t\t\t.then(() => {\n// \t\t\t\tcontacts.addContact(contact);\n// \t\t\t\tcontacts.save();\n// \t\t\t})\n// \t\t\t.then(() => {\n// \t\t\t\tres.write(`Successfully saved contact: ${ contact.name }`);\n// \t\t\t\tres.end();\n// \t\t\t})\n// \t\t\t.catch((err) => {\n// \t\t\t\tconsole.log(\"Error saving contact:\", err);\n// \t\t\t\tres.statusCode = 500;\n// \t\t\t\tres.write(\"Error saving contact.\");\n// \t\t\t\tres.end();\n// \t\t\t})\n// \t    });\n// \t} \n// \telse if(req.url === '/all-contacts'){\n// \t\treturn contacts.load()\n// \t\t.then(()=> {\n// \t\t\tconsole.log(contacts);\n// \t\t\t// console.log(contacts[\"list\"]);\n\n// \t\t\tres.write(JSON.stringify(contacts.list));\n\t\t\t\n// \t\t\tres.end();\n// \t\t})\n// \t\t.catch(err => {\n// \t\t\tconsole.log(err);\n// \t\t\tres.statusCode = 500;\n// \t\t\tres.write(\"Internal server error\");\n// \t\t\tres.end();\n// \t\t});\n// \t}\n// \telse\n// \t// if none the urls above match, search for file in public folder\n// \t\tfs.readFile(`./public${ req.url }`, \"utf8\", (err, data) => {\n// \t\t\tif(err){\n// \t\t\t\tconsole.log(\"Error reading file:\", err);\n// \t\t\t\tres.statusCode = 404;\n// \t\t\t\tres.write(\"File not found.\");\n// \t\t\t\treturn res.end();\n// \t\t\t}\n// \t\t\t// console.log(\"Data:\", data);\n// \t\t\tres.write(data);\n// \t\t\tres.end();\n// \t\t});\n// })\n// .listen(8080);"]}